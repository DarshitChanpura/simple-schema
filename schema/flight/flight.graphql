type Airport {
    id: ID!
    city: String!
    country: String!
    location: Location!
    region: String
    weather: String
}

type Location {
    lat: Float!
    lon: Float!
}

type Flight {
    id: ID!
    flightNumber: String!
    time: DateTime!
    origin: Airport!
    destination: Airport!
    price: Float
    delay: Delay
    distanceKM: Float # Derived
    distanceMI: Float # Derived
}

type Delay {
    duration: Time!
    type: String
}

input KeywordQueryOperatorInput {
    eq: String
    in: [String]
    notEq: String
    notIn: [String]
}

input TimeFilterInput {
    departureBefore: DateTime
    departureAfter: DateTime
}

input AirportFilterInput {
    id: KeywordQueryOperatorInput
    city: KeywordQueryOperatorInput
    country: KeywordQueryOperatorInput
    weather: KeywordQueryOperatorInput
}

input FlightFilterInput {
    time: TimeFilterInput
    origin: AirportFilterInput
    destination: AirportFilterInput
}

type Query {
    flights(filter: FlightFilterInput): [Flight]!
    flight(id: ID!): Flight
}
